{"version":3,"sources":["services/cookies.service.ts"],"names":[],"mappings":"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","file":"services/cookies.service.js","sourcesContent":["import {Injectable, Optional} from '@angular/core';\r\nimport {Json, isPresent, isBlank, isString} from '@angular/common/src/facade/lang';\r\nimport {CookieOptions} from './base-cookie-options';\r\nimport {BaseCookieOptions} from './base-cookie-options';\r\nimport {CookieOptionsArgs} from './cookie-options-args.model';\r\n\r\n@Injectable()\r\nexport class CookieService {\r\n  constructor(@Optional() private _defaultOptions: CookieOptions) {}\r\n\r\n  /**\r\n   * @name cookieService#get\r\n   *\r\n   * @description\r\n   * Returns the value of given cookie key.\r\n   *\r\n   * @param {string} key Id to use for lookup.\r\n   * @returns {string} Raw cookie value.\r\n   */\r\n  get(key: string): string { return (<any>this._cookieReader())[key]; }\r\n\r\n  /**\r\n   * @name cookieService#getObject\r\n   *\r\n   * @description\r\n   * Returns the deserialized value of given cookie key.\r\n   *\r\n   * @param {string} key Id to use for lookup.\r\n   * @returns {Object} Deserialized cookie value.\r\n   */\r\n  getObject(key: string): Object {\r\n    let value = this.get(key);\r\n    return value ? Json.parse(value) : value;\r\n  }\r\n\r\n  /**\r\n   * @name cookieService#getAll\r\n   *\r\n   * @description\r\n   * Returns a key value object with all the cookies.\r\n   *\r\n   * @returns {Object} All cookies\r\n   */\r\n  getAll(): Object { return <any>this._cookieReader(); }\r\n\r\n  /**\r\n   * @name cookieService#put\r\n   *\r\n   * @description\r\n   * Sets a value for given cookie key.\r\n   *\r\n   * @param {string} key Id for the `value`.\r\n   * @param {string} value Raw value to be stored.\r\n   * @param {CookieOptionsArgs} options (Optional) Options object.\r\n   */\r\n  put(key: string, value: string, options?: CookieOptionsArgs) {\r\n    this._cookieWriter()(key, value, options);\r\n  }\r\n\r\n  /**\r\n   * @name cookieService#putObject\r\n   *\r\n   * @description\r\n   * Serializes and sets a value for given cookie key.\r\n   *\r\n   * @param {string} key Id for the `value`.\r\n   * @param {Object} value Value to be stored.\r\n   * @param {CookieOptionsArgs} options (Optional) Options object.\r\n   */\r\n  putObject(key: string, value: Object, options?: CookieOptionsArgs) {\r\n    this.put(key, Json.stringify(value), options);\r\n  }\r\n\r\n  /**\r\n   * @name cookieService#remove\r\n   *\r\n   * @description\r\n   * Remove given cookie.\r\n   *\r\n   * @param {string} key Id of the key-value pair to delete.\r\n   * @param {CookieOptionsArgs} options (Optional) Options object.\r\n   */\r\n  remove(key: string, options?: CookieOptionsArgs): void {\r\n    this._cookieWriter()(key, undefined, options);\r\n  }\r\n\r\n  /**\r\n   * @name cookieService#removeAll\r\n   *\r\n   * @description\r\n   * Remove all cookies.\r\n   */\r\n  removeAll(): void {\r\n    let cookies = this.getAll();\r\n    Object.keys(cookies).forEach(key => { this.remove(key); });\r\n  }\r\n\r\n  private _cookieReader(): Object {\r\n    let rawDocument = document;\r\n    let lastCookies = {};\r\n    let lastCookieString = '';\r\n    let that = this;\r\n\r\n    let cookieArray: string[], cookie: string, i: number, index: number, name: string;\r\n    let currentCookieString = rawDocument.cookie || '';\r\n    if (currentCookieString !== lastCookieString) {\r\n      lastCookieString = currentCookieString;\r\n      cookieArray = lastCookieString.split('; ');\r\n      lastCookies = {};\r\n\r\n      for (i = 0; i < cookieArray.length; i++) {\r\n        cookie = cookieArray[i];\r\n        index = cookie.indexOf('=');\r\n        if (index > 0) {  // ignore nameless cookies\r\n          name = that._safeDecodeURIComponent(cookie.substring(0, index));\r\n          // the first value that is seen for a cookie is the most\r\n          // specific one.  values for the same cookie name that\r\n          // follow are for less specific paths.\r\n          if (isBlank((<any>lastCookies)[name])) {\r\n            (<any>lastCookies)[name] = that._safeDecodeURIComponent(cookie.substring(index + 1));\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return lastCookies;\r\n  }\r\n\r\n  private _cookieWriter() {\r\n    let that = this;\r\n    var rawDocument = document;\r\n\r\n    return function(name: string, value: string, options?: CookieOptionsArgs) {\r\n      rawDocument.cookie = that._buildCookieString(name, value, options);\r\n    };\r\n  }\r\n\r\n  private _safeDecodeURIComponent(str: string) {\r\n    try {\r\n      return decodeURIComponent(str);\r\n    } catch (e) {\r\n      return str;\r\n    }\r\n  }\r\n\r\n  private _buildCookieString(name: string, value: string, options?: CookieOptionsArgs): string {\r\n    var cookiePath = '/';\r\n    var path: string, expires: any;\r\n    var defaultOpts =\r\n        this._defaultOptions || new CookieOptions(<CookieOptionsArgs>{path: cookiePath});\r\n    var opts: CookieOptions = this._mergeOptions(defaultOpts, options);\r\n    expires = opts.expires;\r\n    if (isBlank(value)) {\r\n      expires = 'Thu, 01 Jan 1970 00:00:00 GMT';\r\n      value = '';\r\n    }\r\n    if (isString(expires)) {\r\n      expires = new Date(expires);\r\n    }\r\n\r\n    var str = encodeURIComponent(name) + '=' + encodeURIComponent(value);\r\n    str += opts.path ? ';path=' + opts.path : '';\r\n    str += opts.domain ? ';domain=' + opts.domain : '';\r\n    str += expires ? ';expires=' + expires.toUTCString() : '';\r\n    str += opts.secure ? ';secure' : '';\r\n\r\n    // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:\r\n    // - 300 cookies\r\n    // - 20 cookies per unique domain\r\n    // - 4096 bytes per cookie\r\n    var cookieLength = str.length + 1;\r\n    if (cookieLength > 4096) {\r\n      console.log(\r\n          `Cookie \\'${name}\\' possibly not set or overflowed because it was too large (${cookieLength} > 4096 bytes)!`);\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n  private _mergeOptions(defaultOpts: BaseCookieOptions,\r\n                        providedOpts?: CookieOptionsArgs): CookieOptions {\r\n    let newOpts = defaultOpts;\r\n    if (isPresent(providedOpts)) {\r\n      return newOpts.merge(new CookieOptions(providedOpts));\r\n    }\r\n    return newOpts;\r\n  }\r\n}\r\n"],"sourceRoot":"/source/"}