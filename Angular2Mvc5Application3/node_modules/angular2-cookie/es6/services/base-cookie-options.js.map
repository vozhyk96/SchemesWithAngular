/**
 * angular2-cookie - Implementation of Angular 1.x $cookies service to Angular 2
 * @version v1.2.1
 * @link https://github.com/salemdar/angular2-cookie#readme
 * @license MIT
 */
{"version":3,"sources":["services/base-cookie-options.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EAAC,SAAS,EAAC,MAAM,iCAAiC;OAElD,EAAC,UAAU,EAAC,MAAM,eAAe;OACjC,EAAC,MAAM,EAAC,MAAM,+CAA+C;AAEpE,eAAe;AACf;IAME,YAAY,EAAC,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAoB;QAC5D,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,CAAC,GAAG,IAAI,GAAG,IAAI,CAAC;QAC1C,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,MAAM,GAAG,IAAI,CAAC;QAChD,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC,GAAG,OAAO,GAAG,IAAI,CAAC;QACnD,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,MAAM,GAAG,KAAK,CAAC;IACnD,CAAC;IAED,KAAK,CAAC,OAA2B;QAC/B,MAAM,CAAC,IAAI,aAAa,CAAoB;YAC1C,IAAI,EAAE,SAAS,CAAC,OAAO,CAAC,IAAI,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI;YAC9E,MAAM,EAAE,SAAS,CAAC,OAAO,CAAC,IAAI,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM;YACtF,OAAO,EAAE,SAAS,CAAC,OAAO,CAAC,IAAI,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO;YAC1F,MAAM,EAAE,SAAS,CAAC,OAAO,CAAC,IAAI,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM;SACvF,CAAC,CAAC;IACL,CAAC;AACH,CAAC;AAED,eAAe;AAEf,+DAAuC,aAAa;IAClD;QAAgB,MAAyB,EAAC,IAAI,EAAE,MAAM,EAAE,CAAC,WAAW,EAAE,EAAC,CAAC,CAAC;IAAC,CAAC;AAC7E,CAAC;AAHD;IAAC,UAAU,EAAE;;qBAAA;AAGZ","file":"services/base-cookie-options.js","sourcesContent":["import {isPresent} from '@angular/common/src/facade/lang';\r\nimport {CookieOptionsArgs} from './cookie-options-args.model';\r\nimport {Injectable} from '@angular/core';\r\nimport {getDOM} from '@angular/platform-browser/src/dom/dom_adapter';\r\n\r\n/** @private */\r\nexport class CookieOptions {\r\n  path: string;\r\n  domain: string;\r\n  expires: string | Date;\r\n  secure: boolean;\r\n\r\n  constructor({path, domain, expires, secure}: CookieOptionsArgs) {\r\n    this.path = isPresent(path) ? path : null;\r\n    this.domain = isPresent(domain) ? domain : null;\r\n    this.expires = isPresent(expires) ? expires : null;\r\n    this.secure = isPresent(secure) ? secure : false;\r\n  }\r\n\r\n  merge(options?: CookieOptionsArgs): CookieOptions {\r\n    return new CookieOptions(<CookieOptionsArgs>{\r\n      path: isPresent(options) && isPresent(options.path) ? options.path : this.path,\r\n      domain: isPresent(options) && isPresent(options.domain) ? options.domain : this.domain,\r\n      expires: isPresent(options) && isPresent(options.expires) ? options.expires : this.expires,\r\n      secure: isPresent(options) && isPresent(options.secure) ? options.secure : this.secure,\r\n    });\r\n  }\r\n}\r\n\r\n/** @private */\r\n@Injectable()\r\nexport class BaseCookieOptions extends CookieOptions {\r\n  constructor() { super(<CookieOptionsArgs>{path: getDOM().getBaseHref()}); }\r\n}\r\n"],"sourceRoot":"/source/"}